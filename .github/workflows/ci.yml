name: CI/CD Pipeline

on:
  push:
    branches: [ main, update-ci ]
  pull_request:
    branches: [ main ]

jobs:
  format:
    name: Code Formatting
    runs-on: ubuntu-22.04
    container:
      image: wangyt163/mpc-cbf:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Check and fix code formatting
      run: |
        # Use clang-format with glob patterns for recursive formatting
        clang-format -i --style=file workspace/lib/*/include/**/*.{cpp,h,hpp} workspace/lib/*/src/**/*.{cpp,h,hpp} || true

    - name: Commit formatting changes
      run: |
        if ! git diff --quiet; then
          echo "Code formatting changes applied"
          git add .
          git commit -m "Auto-fix code formatting with clang-format [skip ci]"
          git push
        else
          echo "All files are properly formatted"
        fi

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-22.04
    # needs: format
    container:
      image: wangyt163/mpc-cbf:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Configure Git
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE

    - name: Build CBF Package
      run: |
        cd workspace/lib/cbf
        mkdir -p build
        cd build
        cmake .. -G Ninja
        ninja -j20

    - name: Run CBF Tests
      continue-on-error: true
      run: |
        cd workspace/lib/cbf/build
        ctest --output-on-failure -j20

    - name: Build MPC CBF Package
      run: |
        cd workspace/lib/mpc_cbf
        mkdir -p build
        cd build
        cmake .. -G Ninja
        ninja -j20

    - name: Run MPC CBF Tests
      continue-on-error: true
      run: |
        cd workspace/lib/mpc_cbf/build
        ctest --output-on-failure -j20

  run-examples:
    name: Run Examples
    runs-on: ubuntu-22.04
    needs: build-and-test
    if: always()  # Run even if build-and-test fails
    container:
      image: wangyt163/mpc-cbf:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Configure Git
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE

    - name: Build and Run CBF Example
      run: |
        cd workspace/lib/cbf
        mkdir -p build
        cd build
        cmake .. -G Ninja
        ninja -j20
        # Build and run formation control example if it exists
        if ninja -t targets | grep -q "cbf_examples_FormationControl_example"; then
          ninja cbf_examples_FormationControl_example
          echo "Running CBF Formation Control Example..."
          timeout 60s ./cbf_examples_FormationControl_example || echo "Example completed or timed out after 60s"
        fi

    - name: Build and Run MPC CBF Example
      run: |
        cd workspace/lib/mpc_cbf
        mkdir -p build
        cd build
        cmake .. -G Ninja
        ninja -j20
        # Build and run formation control example if it exists
        if ninja -t targets | grep -q "mpc_cbf_examples_MPCCBFFormationControl_example"; then
          ninja mpc_cbf_examples_MPCCBFFormationControl_example
          echo "Running MPC CBF Formation Control Example..."
          timeout 60s ./mpc_cbf_examples_MPCCBFFormationControl_example || echo "Example completed or timed out after 60s"
        fi
